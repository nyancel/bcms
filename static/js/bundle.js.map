{
  "version": 3,
  "sources": ["../../ts/src/util.ts", "../../ts/src/user.ts", "../../ts/src/editor.ts", "../../ts/src/gallery_popup.ts", "../../ts/src/gallery.ts", "../../ts/src/index.ts", "../../ts/src/view.ts", "../../ts/src/main.ts"],
  "sourcesContent": ["import { get_local_user_data } from \"./user\";\n\n// globals\nconst CACHE_KEY = \"utilts-cache-stroage-key\";\n\n// internal functions\nfunction save_cache_to_local(cache: UtilCacheItem[]) {\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cache));\n}\n\nasync function create_response(resp: Response){\n    let json = await resp.json();\n    \n}\n\nfunction load_local_cache() {\n    let local = localStorage.getItem(CACHE_KEY);\n    if (!local) {\n        return null;\n    }\n    let cache = JSON.parse(local) as UtilCacheItem[];\n    if (!cache) {\n        throw new Error(\"cache cant be parsed\");\n    }\n    return cache\n}\n\nfunction cache_get(key: string) {\n    // load up the cache\n    let cache = load_local_cache();\n    if (!cache) {\n        return null; // cache might not exist\n    }\n\n    // remove stale keys\n    for (let index = 0; index < cache.length; index++) {\n        if (cache[index].expires_at < time()) {\n            cache.splice(index, 1);\n        }\n    }\n\n    // save any changes\n    save_cache_to_local(cache);\n\n    // find the item\n    for (let index = 0; index < cache.length; index++) {\n        if (cache[index].key == key) {\n            return cache[index].item;\n        }\n    }\n\n    // if no match, return the item\n    return null;\n}\n\nfunction cache_add(key: string, value: string, lifetime: number = 3600) {\n    let cache = load_local_cache();\n    if (!cache) {\n        cache = [];\n    }\n\n    let c: UtilCacheItem = {\n        key: key,\n        item: value,\n        expires_at: time() + lifetime, // valid for one hour\n    };\n\n    cache.push(c);\n    console.log(c);\n    save_cache_to_local(cache);\n}\n\n\nexport function time() {\n    let d = new Date();\n    let current_time = d.getTime() / 1000;\n    return current_time;\n}\n\n\nexport async function post_json(endpoint: string, data: any) {\n    let user_data = get_local_user_data();\n    if (user_data) {\n        data.auth_token = user_data.token.id;\n    }\n\n    let response = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n    });\n\n    let response_json = await response.json();\n    return response_json;\n}\n\nexport async function post_formdata(endpoint: string, data: FormData) {\n    // add our token if we have one\n    let user_data = get_local_user_data();\n    if (user_data) {\n        data.append(\"auth_token\", user_data?.token.id);\n    }\n\n    let response = await fetch(endpoint, {\n        method: \"POST\",\n        body: data,\n    });\n    console.log(response)\n\n    let json_response = await response.json();\n    console.log(json_response);\n    return json_response;\n}\n\nexport async function get_smallest_res_from_src(image_id: string, min_width: number) {\n    console.log(\"getting smallest item from res\")\n    // check the cache first\n    let key = `util_get_media_src_by_width-${image_id}-${min_width}`;\n    let cached_value = cache_get(key);\n    if (cached_value) {\n        return cached_value;\n    }\n\n    let image_metadata = await post_json(\"/media/fetch_media\", {\n        media_ID: image_id,\n    });\n\n\n    let min = Math.pow(min_width, 2);\n\n    let resolutions = await Promise.all(\n        image_metadata.instances.map((res: { instance_id: string, x_dimension: number, y_dimension: number }) => {\n            return {\n                id: res.instance_id,\n                resolution: res.x_dimension * res.y_dimension,\n            };\n        })\n    );\n\n    // by default pick the highest res, then loop over and select the lowest\n    // res that is acceptable for the display.\n    resolutions = resolutions.sort((a, b) => a.resolution - b.resolution);\n    let instance_id = resolutions[resolutions.length - 1].id;\n    for (let r of resolutions) {\n        if (r.resolution > min) {\n            instance_id = r.id;\n            break; // break once the first image res satisfies our condition\n        }\n    }\n\n    // format target url\n    let target_url = `/media/fetch_media_instance?instance_ID=${instance_id}`;\n    // populate cache before returning\n    cache_add(key, target_url);\n    return target_url;\n}", "import { post_json, time } from \"./util\";\n\n\n\n// global constants\nconst USER_LOCAL_TOKEN_STORAGE_KEY = \"userts-local-user-token\";\nconst USER_LOCAL_DATA_STORAGE_KEY = \"userts-local-user-data\";\n\n// core functions\nexport function get_local_user_data() {\n    let token_string = localStorage.getItem(USER_LOCAL_TOKEN_STORAGE_KEY);\n    let user_string = localStorage.getItem(USER_LOCAL_DATA_STORAGE_KEY)\n    if (!token_string || !user_string) {\n        return null;\n    }\n\n    let token = JSON.parse(token_string);\n    let user = JSON.parse(user_string);\n    if (!token || !user) {\n        return null;\n    }\n\n    let userData: UserData = {\n        token: token,\n        user: user\n    }\n    return userData;\n}\n\nfunction clear_local_user_data() {\n    localStorage.removeItem(USER_LOCAL_DATA_STORAGE_KEY);\n    localStorage.removeItem(USER_LOCAL_TOKEN_STORAGE_KEY);\n}\n\nfunction save_user_data_to_local(userdata: UserData) {\n    let token = JSON.stringify(userdata.token);\n    let data = JSON.stringify(userdata.user);\n    localStorage.setItem(USER_LOCAL_TOKEN_STORAGE_KEY, token);\n    localStorage.setItem(USER_LOCAL_DATA_STORAGE_KEY, data);\n    return true;\n}\n\nfunction get_html_elements() {\n    let login_template = document.querySelector(\".user-details-login-template\") as HTMLTemplateElement | null;\n    let profile_template = document.querySelector(\".user-details-profile-template\") as HTMLTemplateElement | null;\n    let details_container = document.querySelector(\".user-details-container\") as HTMLElement | null;\n\n    if (\n        !login_template ||\n        !profile_template ||\n        !details_container\n    ) {\n        return null;\n    }\n\n    let elements: UserHtmlElements = {\n        login_template: login_template,\n        profile_template: profile_template,\n        details_container: details_container,\n    }\n    return elements;\n}\n\nfunction get_input_fields() {\n    let registration_first_name = document.querySelector(\"#user-register-first-name-input\") as HTMLInputElement | null;\n    let registration_last_name = document.querySelector(\"#user-register-last-name-input\") as HTMLInputElement | null;\n    let registration_email = document.querySelector(\"#user-register-email-input\") as HTMLInputElement | null;\n    let registration_password = document.querySelector(\"#user-register-password-input\") as HTMLInputElement | null;\n    let registration_repeat_password = document.querySelector(\"#user-register-password-repeat-input\") as HTMLInputElement | null;\n    let registration_submit = document.querySelector(\"#user-register-submitt-button\") as HTMLButtonElement | null;\n\n    let signin_email = document.querySelector(\"#user-signin-email-input\") as HTMLInputElement | null;\n    let signin_password = document.querySelector(\"#user-signin-password-input\") as HTMLInputElement | null;\n    let signin_submit = document.querySelector(\"#user-signin-submitt-button\") as HTMLButtonElement | null;\n\n    if (\n        !registration_first_name ||\n        !registration_last_name ||\n        !registration_email ||\n        !registration_password ||\n        !registration_repeat_password ||\n        !registration_submit ||\n        !signin_email ||\n        !signin_password ||\n        !signin_submit\n    ) {\n        return null;\n    }\n\n    let inputs: UserSigninHtmlInputs = {\n        registration: {\n            email: registration_email,\n            first_name: registration_first_name,\n            last_name: registration_last_name,\n            password: registration_password,\n            repeat_password: registration_repeat_password,\n            submit: registration_submit\n        },\n        signin: {\n            email: signin_email,\n            password: signin_password,\n            submit: signin_submit\n        }\n    }\n\n    return inputs\n}\n\n// api coms functions - stuff that talks to the server\nfunction logout() {\n    let userdata = get_local_user_data();\n    if (!userdata) {\n        throw new Error(\"No local user-data\");\n    }\n\n    // tell the server to clear the token, the clear local data;\n    post_json(\"/user/logout\", { user_token: userdata.token.id });\n    clear_local_user_data();\n\n    // reload the user state etc.\n    main();\n}\n\nfunction render_user() {\n    let elements = get_html_elements();\n    if (!elements) {\n        throw new Error(\"could not load html elements\");\n    }\n\n    elements.details_container.innerHTML = \"\";\n\n    let userdata = get_local_user_data();\n    if (!userdata) {\n        let clone = elements.login_template.cloneNode(true) as HTMLTemplateElement;\n        elements.details_container.appendChild(clone.content);\n        return;\n    }\n\n    let clone = elements.profile_template.cloneNode(true) as HTMLTemplateElement;\n    let profile_template = clone.content;\n    let firstname_element = profile_template.querySelector(\"#user-profile-first-name\") as HTMLElement | null;\n    if (!firstname_element) {\n        throw new Error(\"fistname_element not found\");\n    }\n    firstname_element.innerHTML = userdata.user.first_name;\n\n    let lastname_element = profile_template.querySelector(\"#user-profile-last-name\") as HTMLElement | null;\n    if (!lastname_element) {\n        throw new Error(\"lastname_element not found\");\n    }\n    lastname_element.innerHTML = userdata.user.last_name;\n\n    let logout_button = profile_template.querySelector(\"#user-profile-logout-button\") as HTMLElement | null;\n    if (!logout_button) {\n        throw new Error(\"logout_button not found\");\n    }\n    logout_button.onclick = () => {\n        logout();\n    };\n\n    elements.details_container.appendChild(profile_template);\n    return;\n}\n\nfunction enable_register_submit_button(is_valid: boolean, reason: string | undefined) {\n    let inputs = get_input_fields();\n    if (!inputs) {\n        throw new Error(\"input fields not initialized\");\n    }\n\n    if (!is_valid) {\n        inputs.registration.submit.innerHTML = reason ?? \"invalid registration-data\";\n        inputs.registration.submit.classList.toggle(\"bg-green-600\", false);\n        inputs.registration.submit.classList.toggle(\"bg-gray-600\", true);\n        return;\n    }\n\n    inputs.registration.submit.innerHTML = \"Register\";\n    inputs.registration.submit.classList.toggle(\"bg-gray-600\", false);\n    inputs.registration.submit.classList.toggle(\"bg-green-600\", true);\n}\n\nfunction validate_registration_inputs(inputs: UserSigninHtmlInputs) {\n    let valid: boolean = true;\n    let reason: string = \"\";\n\n    if (inputs.registration.password.value != inputs.registration.repeat_password.value) {\n        valid = false;\n        reason = \"passwords dont match\";\n    }\n\n    if (!inputs.registration.first_name.value) {\n        valid = false;\n        reason = \"missing first name\";\n    }\n\n    if (!inputs.registration.email.value) {\n        valid = false;\n        reason = \"missing email\";\n    }\n\n    if (!inputs.registration.last_name.value) {\n        valid = false;\n        reason = \"missing last name\";\n    }\n\n    if (!inputs.registration.password.value) {\n        valid = false;\n        reason = \"missing password\";\n    }\n\n    return {\n        valid,\n        reason\n    };\n}\n\nfunction submit_registration(inputs: UserSigninHtmlInputs) {\n    if (!validate_registration_inputs(inputs).valid) {\n        throw new Error(\"inputs are not valid\");\n    }\n\n    const register_and_signin = async () => {\n        let inputs = get_input_fields();\n        if (!inputs) {\n            throw new Error(\"input fields not initialized\");\n        }\n        if (!validate_registration_inputs(inputs).valid) {\n            throw new Error(\"inputs are not valid\");\n        }\n        const register_data = {\n            email: inputs.registration.email.value,\n            password: inputs.registration.password.value,\n            firstname: inputs.registration.first_name.value,\n            lastname: inputs.registration.last_name.value,\n        };\n\n        let register_response = await post_json(\"/user/register_new_user\", register_data)\n        if (register_response.error) {\n            throw new Error(register_response.error);\n        }\n\n        let login_data = {\n            email: register_data.email,\n            password: register_data.password,\n        };\n\n        let login_response = await post_json(\"/user/login\", login_data);\n        if (login_response.error) {\n            throw new Error(login_response.error);\n        }\n\n        let token = login_response;\n        let user = register_response;\n\n        let user_data: UserData = {\n            user,\n            token\n        }\n        save_user_data_to_local(user_data);\n        window.location.href = \"/\";\n    };\n    register_and_signin();\n}\n\nfunction validate_registration_form(inputs: UserSigninHtmlInputs) {\n    let { valid, reason } = validate_registration_inputs(inputs);\n    enable_register_submit_button(valid, reason);\n}\n\nfunction registration_init() {\n    let inputs = get_input_fields();\n    if (!inputs) {\n        throw new Error(\"inputs not initialized\");\n    }\n    // hook up validation for registration form;\n    inputs.registration.email.oninput = () => validate_registration_form(inputs);\n    inputs.registration.first_name.oninput = () => validate_registration_form(inputs);\n    inputs.registration.last_name.oninput = () => validate_registration_form(inputs);\n    inputs.registration.password.oninput = () => validate_registration_form(inputs);\n    inputs.registration.repeat_password.oninput = () => validate_registration_form(inputs);\n    inputs.registration.submit.onclick = () => submit_registration(inputs);\n    validate_registration_form(inputs);\n}\n\nasync function user_revalidate_token() {\n    let user_data = get_local_user_data();\n    if (!user_data) {\n        return null;\n    }\n\n    if (time() > user_data.token.expires_at) {\n        // token expired, re-render after clearing local data\n        clear_local_user_data();\n        main();\n        return;\n    }\n\n    // refresh if less then 10 minutes left of the token\n    if ((time() + 600) > user_data.token.expires_at) {\n        let new_token_response = await post_json(\"/user/refresh_token\", {\n            user_token: user_data.token.id,\n        });\n        if (new_token_response.error) {\n            throw new Error(new_token_response.error)\n        }\n        user_data.token = new_token_response;\n        save_user_data_to_local(user_data);\n    }\n\n    // validate the current user token\n    let validation_response = await post_json(\"/user/who\", {\n        user_token: user_data.token.id\n    });\n\n    if (validation_response.error) {\n        if (validation_response.error === \"token invalid\") {\n            // token invalid, re-render after clearing local data\n            clear_local_user_data();\n            main();\n            return;\n        }\n        else {\n            throw new Error(validation_response.error)\n        }\n    }\n\n    user_data.user = validation_response;\n    save_user_data_to_local(user_data);\n}\n\nasync function connect_admin_test_button() {\n    let admin_creds = await post_json(\"/user/admin_test_creds\", {}) as UserAuthToken;\n    let admin_data = await post_json(\"/user/who\", { user_token: admin_creds.id }) as User;\n    let user_data: UserData = {\n        token: admin_creds,\n        user: admin_data,\n    }\n    save_user_data_to_local(user_data);\n}\n\nexport default function main() {\n    // just for local testing\n    connect_admin_test_button();\n\n    // user_revalidate_token();\n    render_user();\n\n    // if signing call the other init as well for diff html dom stuff\n    if (window.location.pathname === \"/signin\") {\n        registration_init();\n    }\n}\n", "import { get_local_user_data } from \"./user\";\nimport { time, post_formdata, get_smallest_res_from_src } from \"./util\";\n\n// constant values\nconst LOCAL_ARTICLE_STORAGE_KEY = \"editor-ts-local-article\";\n\n// internal storage functions\nfunction load_local_article() {\n    let article_string = localStorage.getItem(LOCAL_ARTICLE_STORAGE_KEY);\n    if (!article_string) {\n        return null;\n    }\n\n    let article: ArticleData = JSON.parse(article_string);\n    if (!article) {\n        throw new Error(\"could not parse the local article, you fucked up somehow\");\n    }\n    return article;\n}\n\nfunction save_article_to_local(article: ArticleData) {\n    let article_dump = JSON.stringify(article);\n    localStorage.setItem(LOCAL_ARTICLE_STORAGE_KEY, article_dump);\n}\n\nfunction clear_local_article() {\n    localStorage.removeItem(LOCAL_ARTICLE_STORAGE_KEY);\n}\n\n// internal init functions;\nfunction init_empty_article() {\n    let user_data = get_local_user_data();\n    if (!user_data) {\n        throw new Error(\"no user data found, not logged in\");\n    }\n\n    let article: ArticleData = {\n        author_id: user_data.user.id,\n        content: [],\n        description: \"\",\n        last_changed: time(),\n        id: undefined,\n        title: \"\",\n    };\n    save_article_to_local(article);\n    return article;\n}\n\nfunction get_controll_buttons() {\n    let log_button = document.getElementById(\"log-article\") as HTMLButtonElement | null;\n    let add_paragraph_button = document.getElementById(\"add-paragraph\") as HTMLButtonElement | null;\n    let add_image_button = document.getElementById(\"add-image\") as HTMLButtonElement | null;\n    let add_heading_button = document.getElementById(\"add-heading\") as HTMLButtonElement | null;\n\n    if (\n        !log_button ||\n        !add_paragraph_button ||\n        !add_image_button ||\n        !add_heading_button\n    ) {\n        return null;\n    }\n\n    let controll_buttons: ArticleEditorControllButtons = {\n        log_button,\n        add_paragraph_button,\n        add_image_button,\n        add_heading_button\n    }\n\n    return controll_buttons;\n}\n\nfunction get_templates() {\n    let paragraph_templte = document.getElementById(\"article-paragraph-template\") as HTMLTemplateElement | null;\n    let image_templte = document.getElementById(\"article-image-template\") as HTMLTemplateElement | null;\n    let heading_templte = document.getElementById(\"article-heading-template\") as HTMLTemplateElement | null;\n\n    if (\n        !paragraph_templte ||\n        !image_templte ||\n        !heading_templte\n    ) {\n        return null;\n    }\n\n    let templates: ArticleHtmlTemplates = {\n        paragraph: paragraph_templte,\n        image: image_templte,\n        heading: heading_templte,\n    }\n\n    return templates;\n}\n\nfunction get_editor() {\n    return document.getElementById(\"editor-container\") as HTMLElement | null;\n}\n\n\n// editor image functions\nfunction set_image_from_gallery_popup(index: number) {\n    const popup = window.open(\n        \"/gallery-popup\",\n        \"popupWindow\",\n        \"width=600,height=400\"\n    );\n\n    window.receive_data = function (data: string) {\n        console.log(data);\n        let article = load_local_article();\n        if (!article) {\n            throw new Error(\"could not load artilce\");\n        }\n\n        let item = article.content[index];\n        if (item.type != ArticleItemTypeEnum.image) {\n            return;\n        }\n        item.src_id = data;\n        save_article_to_local(article);\n        render_editor();\n    };\n}\n\nfunction set_image_from_file_upload(index: number) {\n    // select a file\n    let input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"png, jpg, jpeg\";\n    input.multiple = false;\n    input.onchange = async () => {\n\n        let article = load_local_article();\n        if (!article) {\n            throw new Error(\"could not load artilce\");\n        }\n\n        let media_item = article.content[index];\n        if (media_item.type != ArticleItemTypeEnum.image) {\n            return;\n        }\n        // retrieve the selected file\n        let input_files = input.files;\n        if (!input_files) {\n            return;\n        }\n        let files = Array.from(input_files);\n        let file = files[0];\n        input.remove();\n\n        // upload the file to the gallery\n        let formdata = new FormData();\n        formdata.append(\"media\", file);\n        let image = await post_formdata(\"/media/upload_media\", formdata);\n        let image_id = image.data.results[0].key;\n        // set the item source\n        media_item.src_id = image_id;\n        article.last_changed = time();\n        save_article_to_local(article);\n        render_editor();\n\n    };\n    input.click();\n}\n\nfunction render_image(entry: HTMLElement, index: number, article: ArticleData) {\n    let display = entry.querySelector(\".image-display\") as HTMLImageElement | null;\n    if (!display) {\n        throw new Error(\"media-display not found\");\n    }\n\n    let media_item = article.content[index];\n    if (media_item.type != ArticleItemTypeEnum.image) {\n        throw new Error(\"item type is not image\");\n    }\n\n    // if src_id is undefined we have not yet chosen an image.\n    if (!media_item.src_id) {\n        display.classList.toggle(\"hidden\", true);\n        return;\n    }\n\n    // else image_id is defined and we render the image\n    const load = async () => {\n        let media_item = article.content[index];\n        if (media_item.type != ArticleItemTypeEnum.image) {\n            throw new Error(\"item type is not image\");\n        }\n        if (!media_item.src_id) {\n            throw new Error(\"src_id not found\");\n        }\n        display.src = await get_smallest_res_from_src(\n            media_item.src_id,\n            entry.clientWidth\n        );\n        display.classList.toggle(\"hidden\", false);\n    };\n    load();\n}\n\nfunction insert_template_in_editor(template: HTMLTemplateElement, editor: HTMLElement) {\n    console.log(template);\n\n    let entry = document.createElement(\"li\");\n    let clone = template.cloneNode(true) as HTMLTemplateElement | null;\n    if (!clone) {\n        throw new Error(\"could not clone template\");\n    }\n    let item = clone.content;\n\n    entry.appendChild(item);\n    editor.appendChild(entry);\n    return entry;\n}\n\nfunction editor_connect_paragraph(entry: HTMLElement, index: number) {\n    let article = load_local_article();\n    if (!article) {\n        throw new Error(\"could not load article\");\n    }\n\n    // init the text-area\n    let textarea = entry.querySelector(\".paragraph-input\") as HTMLTextAreaElement | null;\n    if (!textarea) {\n        throw new Error(\"Could not find textarea\");\n    }\n    let text_item = article.content[index];\n    if (text_item.type != ArticleItemTypeEnum.paragraph) {\n        throw new Error(\"Article item at index is not a paragraph\");\n    }\n    textarea.value = text_item.text;\n\n    // commit changes when they occur\n    textarea.onchange = () => {\n        let article = load_local_article();\n        if (!article) {\n            throw new Error(\"could not load article\");\n        }\n        let text_item = article.content[index];\n        if (text_item.type != ArticleItemTypeEnum.paragraph) {\n            throw new Error(\"Article item at index is not a paragraph\");\n        }\n        text_item.text = textarea.value;\n        save_article_to_local(article);\n    };\n}\n\nfunction editor_image_connect(entry: HTMLElement, index: number) {\n    // connect the alt-text and its relevant update\n    let article = load_local_article();\n    if (!article) {\n        throw new Error(\"could not load article\");\n    }\n\n    // init the image-item alt text\n    let image_item = article.content[index];\n    if (image_item.type != ArticleItemTypeEnum.image) {\n        throw new Error(\"Article item at index is not a image\");\n    }\n\n    let alt_text = entry.querySelector(\".image-alt-text-input\") as HTMLInputElement | null;\n    if (!alt_text) {\n        throw new Error(\"could not find alt_text element\");\n    }\n\n    alt_text.value = image_item.alt_text;\n\n    // commit alt text changes when they occurs\n    alt_text.onchange = () => {\n        let article = load_local_article();\n        if (!article) {\n            throw new Error(\"could not load article\");\n        }\n        let image_item = article.content[index];\n        if (image_item.type != ArticleItemTypeEnum.image) {\n            throw new Error(\"Article item at index is not a image\");\n        }\n        image_item.alt_text = alt_text.value;\n        save_article_to_local(article);\n    };\n\n    // connect the upload buttons\n    let image_select_button = entry.querySelector(\".image-gallery-select\") as HTMLElement | null;\n    let image_upload_button = entry.querySelector(\".image-gallery-upload\") as HTMLElement | null;\n\n    if (image_select_button) {\n        image_select_button.onclick = () => set_image_from_gallery_popup(index);\n    }\n\n    if (image_upload_button) {\n        image_upload_button.onclick = () => set_image_from_file_upload(index);\n    }\n}\n\nfunction editor_connect_generic(entry: HTMLElement, index: number) {\n    // generic delete\n    let delete_button = entry.querySelector(\".delete-button\") as HTMLElement | null;\n    if (delete_button) {\n        delete_button.onclick = () => {\n            article_delete_item(index);\n            render_editor();\n        };\n    }\n\n    // generic move up\n    let move_up_button = entry.querySelector(\".move-up-button\") as HTMLElement | null;\n    if (move_up_button) {\n        move_up_button.onclick = () => {\n            article_move_item(index, -1);\n            render_editor();\n        };\n    }\n\n    // generic move down\n    let move_down_button = entry.querySelector(\".move-down-button\") as HTMLElement | null;\n    if (move_down_button) {\n        move_down_button.onclick = () => {\n            article_move_item(index, 1);\n            render_editor();\n        };\n    }\n}\n\n// view functions\nfunction render_editor() {\n    let article = load_local_article();\n    if (!article) {\n        throw new Error(\"could not load article\");\n    }\n\n    let y_pos = window.scrollY;\n    let editor = get_editor();\n    let templates = get_templates();\n\n    if (!editor) {\n        throw new Error(\"Editor is not initialized\");\n    }\n\n    if (!templates) {\n        throw new Error(\"templates did not load\");\n    }\n\n    editor.innerHTML = \"\";\n    let entry;\n\n    for (let index = 0; index < article.content.length; index++) {\n        switch (article.content[index].type) {\n            case ArticleItemTypeEnum.paragraph:\n                entry = insert_template_in_editor(templates.paragraph, editor);\n                editor_connect_paragraph(entry, index);\n                break;\n\n            case ArticleItemTypeEnum.image:\n                entry = insert_template_in_editor(templates.image, editor);\n                render_image(entry, index, article);\n                editor_image_connect(entry, index);\n                break;\n\n            case ArticleItemTypeEnum.heading:\n                entry = insert_template_in_editor(templates.heading, editor);\n                // editor_heading_connect(entry, index); TODO fix the editor heading connector\n                break;\n\n            // skip to next item if we dont have a template for the type\n            default:\n                console.log(\"Item type in editor-render is unknown, skipping\")\n                continue;\n        }\n        editor_connect_generic(entry, index);\n    }\n\n    save_article_to_local(article);\n\n    requestAnimationFrame(() => {\n        window.scrollTo(0, y_pos);\n    });\n}\n\n// article functions\nfunction article_add_item(item_type: ArticleItemTypeEnum) {\n    let article = load_local_article();\n    if (!article) {\n        throw new Error(\"could not load artilce\");\n    }\n\n    let length = article.content.length;\n    let new_item: ArticleTextItem | ArticleMediaItem;\n\n    switch (item_type) {\n        case ArticleItemTypeEnum.paragraph:\n        case ArticleItemTypeEnum.heading:\n            new_item = {\n                type: item_type,\n                text: \"\",\n                index: length\n            }\n            break;\n        case ArticleItemTypeEnum.image:\n            new_item = {\n                type: item_type,\n                alt_text: \"\",\n                index: length,\n                src_id: undefined,\n            }\n            break;\n    }\n\n    article.content.push(new_item);\n    article.last_changed = time();\n\n    save_article_to_local(article);\n    render_editor();\n}\n\nfunction article_delete_item(index: number) {\n    let article = load_local_article();\n    if (!article) {\n        throw new Error(\"could not load article\");\n    }\n\n    article.content.splice(index, 1);\n    article.last_changed = time();\n\n    save_article_to_local(article);\n    return article;\n}\n\nfunction article_move_item(index: number, move_by: number) {\n    let article = load_local_article();\n    if (!article) {\n        throw new Error(\"could not load article\");\n    }\n\n    let target = index + move_by;\n    if (target < 0 || target >= article.content.length) {\n        throw new Error(\"target position is out of bounds\");\n    }\n    let [item_to_move] = article.content.splice(index, 1);\n    article.content.splice(target, 0, item_to_move);\n    article.last_changed = time();\n\n    save_article_to_local(article);\n    return article;\n}\n\n\nexport default function main() {\n    let user_data = get_local_user_data();\n    if (!user_data) {\n        // redirect out of editor if not logged in\n        window.location.href = \"/\";\n        return;\n    }\n\n    // load or initalize the article;\n    let article = load_local_article();\n    if (!article) {\n        article = init_empty_article();\n    }\n\n    let controll_buttons = get_controll_buttons();\n    if (!controll_buttons) {\n        throw new Error(\"controll buttons not initialized\");\n    }\n\n    controll_buttons.log_button.onclick = () => console.log(article);\n    // insertion buttons\n    controll_buttons.add_paragraph_button.onclick = () => article_add_item(ArticleItemTypeEnum.paragraph);\n    controll_buttons.add_image_button.onclick = () => article_add_item(ArticleItemTypeEnum.image);\n    controll_buttons.add_heading_button.onclick = () => article_add_item(ArticleItemTypeEnum.heading);\n\n    render_editor();\n}", "import { post_json, get_smallest_res_from_src } from \"./util\";\n\n\n\nfunction get_gallery_elements() {\n    let image_preview_template = document.getElementById(\"gallery-image-preview-template\") as HTMLElement | null;\n    let image_display = document.getElementById(\"gallery-image-display\") as HTMLElement | null;\n\n    if (!image_display || !image_preview_template) {\n        return null;\n    }\n\n    return {\n        image_preview_template,\n        image_display\n    }\n}\n\n\nasync function get_all_media() {\n    let response = await post_json(\"/media/fetch_all_media_metadata\", {})\n    if (response.error) {\n        throw new Error(response.error);\n    }\n\n    let all_media: Media[] = response;\n\n    if (all_media.length > 1) {\n        all_media.sort((a: Media, b: Media) => b.creation_time - a.creation_time);\n    }\n    all_media = all_media.filter((m) => m && m.id)\n    return all_media as Media[]\n}\n\nexport default async function main() {\n    let html_elements = get_gallery_elements();\n    if (!html_elements) {\n        throw new Error(\"Gallery HTML elements not initialized\");\n    }\n\n    let all_media = await get_all_media();\n    let target_url_promises = all_media.map(async (m) => {\n        let target = await get_smallest_res_from_src(m.id, html_elements.image_display.clientWidth);\n        return { target, media: m };\n    })\n    let targets = await Promise.all(target_url_promises);\n\n    let entry_promises = targets.map((t) => {\n        let entry = document.createElement(\"li\");\n        let clone = html_elements.image_preview_template.cloneNode(true) as HTMLTemplateElement;\n        let clone_content = clone.content;\n\n        entry.appendChild(clone_content);\n        let img = entry.querySelector(\"img\") as HTMLImageElement | null;\n        if (!img) {\n            throw new Error(\"could not find image element, something went wrong\");\n        }\n        img.src = t.target;\n        return { entry, ...t };\n    })\n    let entries = await Promise.all(entry_promises);\n\n    entries.forEach((e) => {\n        e.entry.onclick = () => {\n            window.opener.receive_data(e.media.id);\n            window.close();\n        }\n    })\n\n    html_elements.image_display.innerHTML = \"\";\n    entries.forEach((e) => {\n        html_elements.image_display.appendChild(e.entry);\n    });\n}\n", "import { get_smallest_res_from_src, post_formdata, post_json } from \"./util\";\n\nfunction get_html_elements() {\n    let input_source = document.getElementById(\"image-upload-source\") as HTMLInputElement | null;\n    let image_preview_template = document.getElementById(\"gallery-image-preview-template\") as HTMLTemplateElement | null;\n    let image_display = document.getElementById(\"gallery-image-display\") as HTMLElement | null;\n    let upload_button = document.getElementById(\"upload-image-button\") as HTMLButtonElement | null;\n\n    if (\n        !input_source ||\n        !image_preview_template ||\n        !image_display ||\n        !upload_button\n    ) {\n        return null;\n    }\n\n    let elements: GalleryHtmlElements = {\n        input_source,\n        image_preview_template,\n        image_display,\n        upload_button\n    };\n    return elements;\n}\n\nasync function load_all_media(html_elements: GalleryHtmlElements) {\n    let response = await post_json(\"/media/fetch_all_media_metadata\", {});\n    console.log(response);\n    if (response.error) {\n        throw new Error(response.error);\n    }\n    if (response.success == 0) {\n        return null;\n        // should throw new Error(response.message);\n    }\n\n    let all_media = response as Media[];\n    console.log(all_media);\n    if (all_media.length <= 0) {\n        throw new Error(\"no media found\");\n    }\n    all_media = all_media.filter((media) => media && media.id);\n\n\n    let media_promises = all_media.map(async (media) => {\n        // generate the entries and assign relevant functions etc\n        let target_url = await get_smallest_res_from_src(\n            media.id,\n            html_elements.image_display.clientWidth\n        );\n        return {\n            media,\n            target_url\n        }\n    });\n    let media_with_targets = await Promise.all(media_promises);\n    if (media_with_targets.length > 1) {\n        media_with_targets.sort((a, b) => b.media.creation_time - a.media.creation_time);\n    }\n    return media_with_targets;\n}\n\nasync function upload_files(input_element: HTMLInputElement) {\n    let files = input_element.files;\n    if (!files) {\n        throw new Error(\"no files attached to input source\")\n    }\n\n    let formdata = new FormData();\n    for (let index = 0; index <= files.length; index++) {\n        formdata.append(\"media\", files[index]);\n    }\n\n    await post_formdata(\"/media/upload_media\", formdata);\n    main();\n    input_element.value = \"\";\n}\n\nasync function render_gallery(html_elements: GalleryHtmlElements) {\n    let all_media = await load_all_media(html_elements);\n    if (!all_media) {\n        html_elements.image_display.innerHTML = \"\";\n        return;\n    }\n\n    // create all the entries that should go in to the dom\n    let entry_promises = all_media.map((media) => {\n        let entry = document.createElement(\"li\");\n        let clone = html_elements.image_preview_template.cloneNode(true) as HTMLTemplateElement;\n        let clone_content = clone.content;\n        entry.append(clone_content);\n        let img_element = entry.querySelector(\"img\") as HTMLImageElement | null;\n        if (!img_element) {\n            throw new Error(\"could not find img element\")\n        }\n        img_element.src = media.target_url;\n        return { entry, media };\n    })\n    let entries = await Promise.all(entry_promises);\n\n    // hook up each remove-element button\n    entries.forEach((e) => {\n        let remove_media_button = e.entry.querySelector(\".remove-image-button\") as HTMLButtonElement | null;\n        if (!remove_media_button) {\n            throw new Error(\"could not find remove media button\")\n        }\n        remove_media_button.onclick = async () => {\n            await post_json(\"/media/update_media_metadata\", {\n                media_ID: e.media.media.id,\n                is_unlisted: true,\n            });\n            main();\n        };\n    })\n\n    html_elements.image_display.innerHTML = \"\";\n    entries.forEach((entry) => html_elements.image_display.appendChild(entry.entry));\n}\n\n// startup\nexport default function main() {\n    let html_elements = get_html_elements();\n    if (!html_elements) {\n        throw new Error(\"html_elements not loaded\");\n    }\n\n    html_elements.upload_button.onclick = () => upload_files(html_elements.input_source);\n\n    render_gallery(html_elements);\n}\n", "import { post_json, get_smallest_res_from_src } from \"./util\";\n// import { get_current_user_token_id } from \"./user\";\n\ntype Article = {\n    id: string,\n    title: string,\n    desc: string,\n    user_id: string,\n    image: Record<string, any>\n}\n\ntype ErrorResponse = {\n    error: string,\n}\n\nconst ARTICLE_TEMPLATE = document.querySelector(\"#list-article-template\") as HTMLTemplateElement | null;\nconst ARTICLE_DISPLAY = document.querySelector(\"#list-article-display\") as HTMLElement | null;\n\nexport default function main() {\n    list_all();\n\n}\n\nfunction render_articles(articles: Article[]) {\n    if (!ARTICLE_DISPLAY) {\n        throw new Error(\"Display list_article not found\");\n    }\n\n    if (!ARTICLE_TEMPLATE) {\n        throw new Error(\"Template is not found\")\n    }\n\n    ARTICLE_DISPLAY.innerHTML = \"\"\n\n    for (let index = 0; index < articles.length; index++) {\n\n        // Generate from template\n        let clone = ARTICLE_TEMPLATE.cloneNode(true) as HTMLTemplateElement;\n        // Alt unntatt <template>\n        let entry = clone.content;\n        let render_title = entry.querySelector(\".list-article-title\") as HTMLElement | null;\n        if (!render_title) {\n            throw new Error(\"title not found\")\n        }\n        render_title.innerHTML = articles[index].title;\n\n\n        // TODO: fetch local images from server with get_smalest_res_from_src\n\n        // Render image if found in article\n        if (articles[index].image[\"src_id\"]) {\n\n            let render_image = entry.querySelector(\".list-article-image\") as HTMLImageElement | null;\n            let render_image_src = articles[index].image[\"src_id\"];\n\n            if (render_image) {\n                render_image.src = render_image_src;\n            }\n\n        }\n\n        let render_desc = entry.querySelector(\".list-article-desc\") as HTMLElement | null;\n        if (!render_desc) {\n            throw new Error(\"title not found\")\n        }\n        render_desc.innerHTML = articles[index].desc;\n\n        let render_user_id = entry.querySelector(\".list-article-user_id\") as HTMLElement | null;\n        if (!render_user_id) {\n            throw new Error(\"title not found\")\n        }\n        render_user_id.innerHTML = articles[index].user_id;\n\n        let entryElement = entry.querySelector(\".list-article-link\") as HTMLElement | null;\n        if (!entryElement) {\n            throw new Error(\"entry element not found\");\n        }\n        entryElement.onclick = () => {\n            window.location.href = `/view?article-id=${articles[index].id}`;\n        }\n\n        // Display faktiske artikkelen\n        ARTICLE_DISPLAY.appendChild(entry);\n    }\n}\n\nasync function list_all() {\n    let all_articles: Article[] | ErrorResponse = await post_json(\"/article/list_all_articles\", {});\n    if (\"error\" in all_articles) {\n        throw new Error(all_articles.error);\n    }\n\n    render_articles(all_articles);\n\n    window.setTimeout(() => { list_all(); }, 1000 * 60 * 10)\n}\n", "\nimport { post_json, time } from \"./util\";\n// Typescript\n\n// type ArticleTextItem = {\n//     type: string,\n//     content: string,\n// }\n\n// type ArticleImageItem = {\n//     type: string,\n//     src_id: string\n//     text: string\n// }\n\ntype Article = {\n    accepted_id: string,\n    body: Record<string, any>,\n    desc: string,\n    id: string,\n    isAccepted: boolean,\n    isDeleted: boolean,\n    isDraft: boolean,\n    isListed: boolean,\n    timestamp: number,\n    title: string,\n    update_timestamp: number,\n    user_id: string\n}\n\ntype ErrorResponse = {\n    error: string,\n}\n\nconst ARTICLE_DISPLAY = document.querySelector(\"#article-display\") as HTMLElement | null;\n\nconst ARTICLE_TEMPLATE_IMAGE = document.querySelector(\"#article-image\") as HTMLTemplateElement | null;\nconst ARTICLE_TEMPLATE_TITLE = document.querySelector(\"#article-title\") as HTMLTemplateElement | null;\nconst ARTICLE_TEMPLATE_METADATA = document.querySelector(\"#article-metadata\") as HTMLTemplateElement | null;\nconst ARTICLE_TEMPLATE_DESC = document.querySelector(\"#article-desc\") as HTMLTemplateElement | null;\nconst ARTICLE_TEMPLATE_TEXT = document.querySelector(\"#article-text\") as HTMLTemplateElement | null;\n\nexport default function main() {\n    // 1. Hente artikkelid fra urlen som view urlen g\u00E5r inn p\u00E5\n    let urlParam = new URLSearchParams(window.location.search);\n    let article_id = urlParam.get(\"article-id\");\n    if (article_id == null) {\n        throw new Error(\"Article not found!\");\n    }\n\n    get_article(article_id);\n}\n\nfunction render_article(article: Article) {\n\n    if (!ARTICLE_DISPLAY) {\n        throw new Error(\"Display_article not found\");\n    }\n\n    if (!ARTICLE_TEMPLATE_IMAGE) {\n        throw new Error(\"Template IMAGE is not found\")\n    }\n\n    if (!ARTICLE_TEMPLATE_TITLE) {\n        throw new Error(\"Template TITLE is not found\")\n    }\n\n    if (!ARTICLE_TEMPLATE_METADATA) {\n        throw new Error(\"Template METADATA is not found\")\n    }\n\n    if (!ARTICLE_TEMPLATE_DESC) {\n        throw new Error(\"Template DESC is not found\")\n    }\n\n    if (!ARTICLE_TEMPLATE_TEXT) {\n        throw new Error(\"Template TEXT is not found\")\n    }\n\n    ARTICLE_DISPLAY.innerHTML = \"\"\n\n    // Render title\n    let clone = ARTICLE_TEMPLATE_TITLE.cloneNode(true) as HTMLTemplateElement;\n    let entry = clone.content;\n    let render_title = entry.querySelector(\".article-title\") as HTMLElement | null;\n    if (!render_title) {\n        throw new Error(\"title not found\")\n    }\n    render_title.innerHTML = article.title;\n    ARTICLE_DISPLAY.append(entry);\n\n    // Render desc\n    clone = ARTICLE_TEMPLATE_DESC.cloneNode(true) as HTMLTemplateElement;\n    entry = clone.content;\n    let render_desc = entry.querySelector(\".article-desc\") as HTMLElement | null;\n    if (!render_desc) {\n        throw new Error(\"description not found!\");\n    }\n    render_desc.innerHTML = article.desc;\n    ARTICLE_DISPLAY.append(entry);\n\n    // Render metadata\n    clone = ARTICLE_TEMPLATE_METADATA.cloneNode(true) as HTMLTemplateElement;\n    entry = clone.content;\n\n    // Created timestamp\n    let render_timestamp = entry.querySelector(\".article-timestamp\") as HTMLElement | null;\n    if (!render_timestamp) {\n        throw new Error(\"created timestamp not found\")\n    }\n    let timestamp = new Date(0);\n    timestamp.setUTCSeconds(article.timestamp);\n    render_timestamp.innerHTML = `Skrevet: ${timestamp.toLocaleString()}`;\n\n    // update timestamp\n    let render_update_timestamp = entry.querySelector(\".article-update-timestamp\") as HTMLElement | null;\n    if (!render_update_timestamp) {\n        throw new Error(\"update timestamp not found\");\n    }\n    let update_timestamp = new Date(0);\n    update_timestamp.setUTCSeconds(article.update_timestamp);\n    render_update_timestamp.innerHTML = `Oppdatert: ${update_timestamp.toLocaleString()}`;\n\n    // Author\n    let render_author = entry.querySelector(\".article-author\") as HTMLElement | null;\n    if (!render_author) {\n        throw new Error(\"author not found\");\n    }\n    render_author.innerHTML = `Skrevet av ${article.user_id}`;\n    ARTICLE_DISPLAY.append(entry);\n\n\n    // Render body\n\n    // TODO sortere slik at index i body blir rett rekkef\u00F8lge\n    for (let index = 0; index < article.body.length; index++) {\n        switch (article.body[index].type) {\n            // TODO hente rett resolution av image\n            case \"image\":\n                clone = ARTICLE_TEMPLATE_IMAGE.cloneNode(true) as HTMLTemplateElement;\n                entry = clone.content;\n                let render_image = entry.querySelector(\".article-image\") as HTMLImageElement | null;\n                let render_image_src = article.body[index].src_id;\n\n                if (render_image) {\n                    render_image.src = render_image_src;\n                }\n                ARTICLE_DISPLAY.appendChild(entry);\n                break;\n            case \"paragraph\":\n                clone = ARTICLE_TEMPLATE_TEXT.cloneNode(true) as HTMLTemplateElement;\n                entry = clone.content;\n                let render_text = entry.querySelector(\".article-text\") as HTMLElement | null;\n                if (!render_text) {\n                    throw new Error(\"text not found\")\n                }\n                render_text.innerHTML = article.body[index].text;\n                ARTICLE_DISPLAY.appendChild(entry);\n                break;\n        }\n\n    }\n\n\n}\n\nasync function get_article(article_id: string | null) {\n    // Post request til blueprint for \u00E5 hente artikkel json\n    let article: Article | ErrorResponse = await post_json(\"/article/get_article\", { \"id\": article_id });\n    if (\"error\" in article) {\n        throw new Error(article.error);\n    }\n\n    console.log(article)\n\n    render_article(article);\n}\n\n", "import editor_main from \"./editor\";\nimport user_main from \"./user\";\nimport gallery_popup_main from \"./gallery_popup\";\nimport gallery_main from \"./gallery\"\nimport index_main from \"./index\"\nimport view_main from \"./view\"\n\ndeclare global {\n    interface Window {\n        receive_data: (data: string) => void;\n    }\n}\n\nwindow.addEventListener(\"load\", (event) => {\n    if (window.location.pathname === \"/editor\") {\n        editor_main();\n    }\n    if (window.location.pathname === \"/gallery-popup\") {\n        gallery_popup_main();\n    }\n    if (window.location.pathname === \"/gallery\") {\n        gallery_main();\n    }\n    if (window.location.pathname === \"/view\") {\n        view_main();\n    }\n    if (window.location.pathname === \"/\") {\n        index_main();\n    }\n\n    user_main();\n});"],
  "mappings": "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",
  "names": ["CACHE_KEY", "save_cache_to_local", "cache", "load_local_cache", "local", "CACHE_KEY", "cache", "cache_get", "key", "index", "time", "save_cache_to_local", "cache_add", "value", "lifetime", "c", "post_json", "endpoint", "data", "user_data", "get_local_user_data", "post_formdata", "response", "json_response", "get_smallest_res_from_src", "image_id", "min_width", "cached_value", "image_metadata", "min", "resolutions", "res", "a", "b", "instance_id", "r", "target_url", "USER_LOCAL_TOKEN_STORAGE_KEY", "USER_LOCAL_DATA_STORAGE_KEY", "get_local_user_data", "token_string", "user_string", "token", "user", "clear_local_user_data", "save_user_data_to_local", "userdata", "data", "get_html_elements", "login_template", "profile_template", "details_container", "get_input_fields", "registration_first_name", "registration_last_name", "registration_email", "registration_password", "registration_repeat_password", "registration_submit", "signin_email", "signin_password", "signin_submit", "logout", "post_json", "main", "render_user", "elements", "clone", "firstname_element", "lastname_element", "logout_button", "enable_register_submit_button", "is_valid", "reason", "inputs", "validate_registration_inputs", "valid", "submit_registration", "register_data", "register_response", "login_data", "login_response", "validate_registration_form", "registration_init", "connect_admin_test_button", "admin_creds", "post_json", "admin_data", "save_user_data_to_local", "main", "render_user", "registration_init", "LOCAL_ARTICLE_STORAGE_KEY", "load_local_article", "article_string", "article", "save_article_to_local", "article_dump", "init_empty_article", "user_data", "get_local_user_data", "article", "time", "save_article_to_local", "get_controll_buttons", "log_button", "add_paragraph_button", "add_image_button", "add_heading_button", "get_templates", "paragraph_templte", "image_templte", "heading_templte", "get_editor", "set_image_from_gallery_popup", "index", "popup", "data", "load_local_article", "item", "render_editor", "set_image_from_file_upload", "input", "media_item", "input_files", "file", "formdata", "image_id", "post_formdata", "render_image", "entry", "display", "get_smallest_res_from_src", "insert_template_in_editor", "template", "editor", "clone", "editor_connect_paragraph", "textarea", "text_item", "editor_image_connect", "image_item", "alt_text", "image_select_button", "image_upload_button", "editor_connect_generic", "delete_button", "article_delete_item", "move_up_button", "article_move_item", "move_down_button", "y_pos", "templates", "article_add_item", "item_type", "length", "new_item", "move_by", "target", "item_to_move", "main", "controll_buttons", "get_gallery_elements", "image_preview_template", "image_display", "get_all_media", "response", "post_json", "all_media", "a", "b", "m", "main", "html_elements", "target_url_promises", "get_smallest_res_from_src", "entry_promises", "t", "entry", "clone_content", "img", "entries", "e", "get_html_elements", "input_source", "image_preview_template", "image_display", "upload_button", "load_all_media", "html_elements", "response", "post_json", "all_media", "media", "media_promises", "target_url", "get_smallest_res_from_src", "media_with_targets", "a", "b", "upload_files", "input_element", "files", "formdata", "index", "post_formdata", "main", "render_gallery", "entry_promises", "entry", "clone_content", "img_element", "entries", "e", "remove_media_button", "ARTICLE_TEMPLATE", "ARTICLE_DISPLAY", "main", "list_all", "render_articles", "articles", "index", "entry", "render_title", "render_image", "render_image_src", "render_desc", "render_user_id", "entryElement", "all_articles", "post_json", "ARTICLE_DISPLAY", "ARTICLE_TEMPLATE_IMAGE", "ARTICLE_TEMPLATE_TITLE", "ARTICLE_TEMPLATE_METADATA", "ARTICLE_TEMPLATE_DESC", "ARTICLE_TEMPLATE_TEXT", "main", "article_id", "get_article", "render_article", "article", "clone", "entry", "render_title", "render_desc", "render_timestamp", "timestamp", "render_update_timestamp", "update_timestamp", "render_author", "index", "render_image", "render_image_src", "render_text", "post_json", "event", "main"]
}
