{
  "version": 3,
  "sources": ["../../ts/src/util.ts", "../../ts/src/user.ts", "../../ts/src/editor.ts", "../../ts/src/main.ts"],
  "sourcesContent": ["// typing\r\ntype CacheItem = {\r\n    key: string,\r\n    item: string,\r\n    expires_at: number\r\n}\r\n\r\n// globals\r\nconst CACHE_KEY = \"utilts-cache-stroage-key\";\r\n\r\n// internal functions\r\nfunction save_cache_to_local(cache: CacheItem[]) {\r\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cache));\r\n}\r\n\r\nfunction load_local_cache() {\r\n    let local = localStorage.getItem(CACHE_KEY);\r\n    if (!local) {\r\n        return null;\r\n    }\r\n    let cache = JSON.parse(local) as CacheItem[];\r\n    if (!cache) {\r\n        throw new Error(\"cache cant be parsed\");\r\n    }\r\n    return cache\r\n}\r\n\r\nfunction cache_get(key: string) {\r\n    // load up the cache\r\n    let cache = load_local_cache();\r\n    if (!cache) {\r\n        return null; // cache might not exist\r\n    }\r\n\r\n    // remove stale keys\r\n    for (let index = 0; index < cache.length; index++) {\r\n        if (cache[index].expires_at < time()) {\r\n            cache.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    // save any changes\r\n    save_cache_to_local(cache);\r\n\r\n    // find the item\r\n    for (let index = 0; index < cache.length; index++) {\r\n        if (cache[index].key == key) {\r\n            return cache[index].item;\r\n        }\r\n    }\r\n\r\n    // if no match, return the item\r\n    return null;\r\n}\r\n\r\nfunction cache_add(key: string, value: string, lifetime: number = 3600) {\r\n    let cache = load_local_cache();\r\n    if (!cache) {\r\n        cache = [];\r\n    }\r\n\r\n    let c: CacheItem = {\r\n        key: key,\r\n        item: value,\r\n        expires_at: time() + lifetime, // valid for one hour\r\n    };\r\n\r\n    cache.push(c);\r\n    console.log(c);\r\n    save_cache_to_local(cache);\r\n}\r\n\r\n\r\nexport function time() {\r\n    let d = new Date();\r\n    let current_time = d.getTime() / 1000;\r\n    return current_time;\r\n}\r\n\r\n\r\nexport async function post_json(endpoint: string, data: Object) {\r\n    let response = await fetch(endpoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n    });\r\n\r\n    let response_json = await response.json();\r\n    return response_json;\r\n}\r\n\r\nexport async function post_formdata(endpoint: string, data: FormData) {\r\n    console.log(\"called stuff\")\r\n    let response = await fetch(endpoint, {\r\n        method: \"POST\",\r\n        body: data,\r\n    });\r\n    console.log(response)\r\n\r\n    let json_response = await response.json();\r\n    console.log(json_response);\r\n    return json_response;\r\n}\r\n\r\nexport async function get_smallest_res_from_src(image_id: string, min_width: number) {\r\n    console.log(\"getting smallest item from res\")\r\n    // check the cache first\r\n    let key = `util_get_media_src_by_width-${image_id}-${min_width}`;\r\n    let cached_value = cache_get(key);\r\n    if (cached_value) {\r\n        return cached_value;\r\n    }\r\n\r\n    let image_metadata = await post_json(\"/media/fetch_media\", {\r\n        media_ID: image_id,\r\n    });\r\n\r\n\r\n    let min = Math.pow(min_width, 2);\r\n\r\n    let resolutions = await Promise.all(\r\n        image_metadata.instances.map((res: { instance_id: string, x_dimension: number, y_dimension: number }) => {\r\n            return {\r\n                id: res.instance_id,\r\n                resolution: res.x_dimension * res.y_dimension,\r\n            };\r\n        })\r\n    );\r\n\r\n    // by default pick the highest res, then loop over and select the lowest\r\n    // res that is acceptable for the display.\r\n    resolutions = resolutions.sort((a, b) => a.resolution - b.resolution);\r\n    let instance_id = resolutions[resolutions.length - 1].id;\r\n    for (let r of resolutions) {\r\n        if (r.resolution > min) {\r\n            instance_id = r.id;\r\n            break; // break once the first image res satisfies our condition\r\n        }\r\n    }\r\n\r\n    // format target url\r\n    let target_url = `/media/fetch_media_instance?instance_ID=${instance_id}`;\r\n    // populate cache before returning\r\n    cache_add(key, target_url);\r\n    return target_url;\r\n}", "import { post_json, time } from \"./util\";\r\n\r\n// types\r\ntype Token = {\r\n    id: string,\r\n    user_id: string,\r\n    created_at: number,\r\n    expires_at: number,\r\n}\r\n\r\ntype User = {\r\n    id: string,\r\n    first_name: string,\r\n    last_name: string,\r\n    email: string,\r\n    last_edited: number,\r\n    created_at: number,\r\n}\r\n\r\ntype UserData = {\r\n    token: Token,\r\n    user: User\r\n}\r\n\r\ntype Inputs = {\r\n    registration: {\r\n        first_name: HTMLInputElement,\r\n        last_name: HTMLInputElement,\r\n        email: HTMLInputElement,\r\n        password: HTMLInputElement,\r\n        repeat_password: HTMLInputElement,\r\n        submit: HTMLButtonElement,\r\n    },\r\n    signin: {\r\n        email: HTMLInputElement,\r\n        password: HTMLInputElement,\r\n        submit: HTMLButtonElement,\r\n    }\r\n}\r\n\r\ntype Elements = {\r\n    login_template: HTMLTemplateElement,\r\n    profile_template: HTMLTemplateElement,\r\n    details_container: HTMLElement,\r\n}\r\n\r\n// global constants\r\nconst USER_LOCAL_TOKEN_STORAGE_KEY = \"userts-local-user-token\";\r\nconst USER_LOCAL_DATA_STORAGE_KEY = \"userts-local-user-data\";\r\n\r\n// core functions\r\nexport function get_local_user_data() {\r\n    let token_string = localStorage.getItem(USER_LOCAL_TOKEN_STORAGE_KEY);\r\n    let user_string = localStorage.getItem(USER_LOCAL_DATA_STORAGE_KEY)\r\n    if (!token_string || !user_string) {\r\n        return null;\r\n    }\r\n\r\n    let token = JSON.parse(token_string);\r\n    let user = JSON.parse(user_string);\r\n    if (!token || !user) {\r\n        return null;\r\n    }\r\n\r\n    let userData: UserData = {\r\n        token: token,\r\n        user: user\r\n    }\r\n    return userData;\r\n}\r\n\r\nfunction clear_local_user_data() {\r\n    localStorage.removeItem(USER_LOCAL_DATA_STORAGE_KEY);\r\n    localStorage.removeItem(USER_LOCAL_TOKEN_STORAGE_KEY);\r\n}\r\n\r\nfunction save_user_data_to_local(userdata: UserData) {\r\n    let token = JSON.stringify(userdata.token);\r\n    let data = JSON.stringify(userdata.user);\r\n    localStorage.setItem(USER_LOCAL_TOKEN_STORAGE_KEY, token);\r\n    localStorage.setItem(USER_LOCAL_DATA_STORAGE_KEY, data);\r\n    return true;\r\n}\r\n\r\nfunction get_html_elements() {\r\n    let login_template = document.querySelector(\".user-details-login-template\") as HTMLTemplateElement | null;\r\n    let profile_template = document.querySelector(\".user-details-profile-template\") as HTMLTemplateElement | null;\r\n    let details_container = document.querySelector(\".user-details-container\") as HTMLElement | null;\r\n\r\n    if (\r\n        !login_template ||\r\n        !profile_template ||\r\n        !details_container\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    let elements: Elements = {\r\n        login_template: login_template,\r\n        profile_template: profile_template,\r\n        details_container: details_container,\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction get_input_fields() {\r\n    let registration_first_name = document.querySelector(\"#user-register-first-name-input\") as HTMLInputElement | null;\r\n    let registration_last_name = document.querySelector(\"#user-register-last-name-input\") as HTMLInputElement | null;\r\n    let registration_email = document.querySelector(\"#user-register-email-input\") as HTMLInputElement | null;\r\n    let registration_password = document.querySelector(\"#user-register-password-input\") as HTMLInputElement | null;\r\n    let registration_repeat_password = document.querySelector(\"#user-register-password-repeat-input\") as HTMLInputElement | null;\r\n    let registration_submit = document.querySelector(\"#user-register-submitt-button\") as HTMLButtonElement | null;\r\n\r\n    let signin_email = document.querySelector(\"#user-signin-email-input\") as HTMLInputElement | null;\r\n    let signin_password = document.querySelector(\"#user-signin-password-input\") as HTMLInputElement | null;\r\n    let signin_submit = document.querySelector(\"#user-signin-submitt-button\") as HTMLButtonElement | null;\r\n\r\n    if (\r\n        !registration_first_name ||\r\n        !registration_last_name ||\r\n        !registration_email ||\r\n        !registration_password ||\r\n        !registration_repeat_password ||\r\n        !registration_submit ||\r\n        !signin_email ||\r\n        !signin_password ||\r\n        !signin_submit\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    let inputs: Inputs = {\r\n        registration: {\r\n            email: registration_email,\r\n            first_name: registration_first_name,\r\n            last_name: registration_last_name,\r\n            password: registration_password,\r\n            repeat_password: registration_repeat_password,\r\n            submit: registration_submit\r\n        },\r\n        signin: {\r\n            email: signin_email,\r\n            password: signin_password,\r\n            submit: signin_submit\r\n        }\r\n    }\r\n\r\n    return inputs\r\n}\r\n\r\n// api coms functions - stuff that talks to the server\r\nfunction logout() {\r\n    let userdata = get_local_user_data();\r\n    if (!userdata) {\r\n        throw new Error(\"No local user-data\");\r\n    }\r\n\r\n    // tell the server to clear the token, the clear local data;\r\n    post_json(\"/user/logout\", { user_token: userdata.token.id });\r\n    clear_local_user_data();\r\n\r\n    // reload the user state etc.\r\n    main();\r\n}\r\n\r\nfunction render_user() {\r\n    let elements = get_html_elements();\r\n    if (!elements) {\r\n        throw new Error(\"could not load html elements\");\r\n    }\r\n\r\n    elements.details_container.innerHTML = \"\";\r\n\r\n    let userdata = get_local_user_data();\r\n    if (!userdata) {\r\n        let clone = elements.login_template.cloneNode(true) as HTMLTemplateElement;\r\n        elements.details_container.appendChild(clone.content);\r\n        return;\r\n    }\r\n\r\n    let clone = elements.profile_template.cloneNode(true) as HTMLTemplateElement;\r\n    let profile_template = clone.content;\r\n    let firstname_element = profile_template.querySelector(\"#user-profile-first-name\") as HTMLElement | null;\r\n    if (!firstname_element) {\r\n        throw new Error(\"fistname_element not found\");\r\n    }\r\n    firstname_element.innerHTML = userdata.user.first_name;\r\n\r\n    let lastname_element = profile_template.querySelector(\"#user-profile-last-name\") as HTMLElement | null;\r\n    if (!lastname_element) {\r\n        throw new Error(\"lastname_element not found\");\r\n    }\r\n    lastname_element.innerHTML = userdata.user.last_name;\r\n\r\n    let logout_button = profile_template.querySelector(\"#user-profile-logout-button\") as HTMLElement | null;\r\n    if (!logout_button) {\r\n        throw new Error(\"logout_button not found\");\r\n    }\r\n    logout_button.onclick = () => {\r\n        logout();\r\n    };\r\n\r\n    elements.details_container.appendChild(profile_template);\r\n    return;\r\n}\r\n\r\nfunction enable_register_submit_button(is_valid: boolean, reason: string | undefined) {\r\n    let inputs = get_input_fields();\r\n    if (!inputs) {\r\n        throw new Error(\"input fields not initialized\");\r\n    }\r\n\r\n    if (!is_valid) {\r\n        inputs.registration.submit.innerHTML = reason ?? \"invalid registration-data\";\r\n        inputs.registration.submit.classList.toggle(\"bg-green-600\", false);\r\n        inputs.registration.submit.classList.toggle(\"bg-gray-600\", true);\r\n        return;\r\n    }\r\n\r\n    inputs.registration.submit.innerHTML = \"Register\";\r\n    inputs.registration.submit.classList.toggle(\"bg-gray-600\", false);\r\n    inputs.registration.submit.classList.toggle(\"bg-green-600\", true);\r\n}\r\n\r\nfunction validate_registration_inputs(inputs: Inputs) {\r\n    let valid: boolean = true;\r\n    let reason: string = \"\";\r\n\r\n    if (inputs.registration.password.value != inputs.registration.repeat_password.value) {\r\n        valid = false;\r\n        reason = \"passwords dont match\";\r\n    }\r\n\r\n    if (!inputs.registration.first_name.value) {\r\n        valid = false;\r\n        reason = \"missing first name\";\r\n    }\r\n\r\n    if (!inputs.registration.email.value) {\r\n        valid = false;\r\n        reason = \"missing email\";\r\n    }\r\n\r\n    if (!inputs.registration.last_name.value) {\r\n        valid = false;\r\n        reason = \"missing last name\";\r\n    }\r\n\r\n    if (!inputs.registration.password.value) {\r\n        valid = false;\r\n        reason = \"missing password\";\r\n    }\r\n\r\n    return {\r\n        valid,\r\n        reason\r\n    };\r\n}\r\n\r\nfunction submit_registration(inputs: Inputs) {\r\n    if (!validate_registration_inputs(inputs).valid) {\r\n        throw new Error(\"inputs are not valid\");\r\n    }\r\n\r\n    const register_and_signin = async () => {\r\n        let inputs = get_input_fields();\r\n        if (!inputs) {\r\n            throw new Error(\"input fields not initialized\");\r\n        }\r\n        if (!validate_registration_inputs(inputs).valid) {\r\n            throw new Error(\"inputs are not valid\");\r\n        }\r\n        const register_data = {\r\n            email: inputs.registration.email.value,\r\n            password: inputs.registration.password.value,\r\n            firstname: inputs.registration.first_name.value,\r\n            lastname: inputs.registration.last_name.value,\r\n        };\r\n\r\n        let register_response = await post_json(\"/user/register_new_user\", register_data)\r\n        if (register_response.error) {\r\n            throw new Error(register_response.error);\r\n        }\r\n\r\n        let login_data = {\r\n            email: register_data.email,\r\n            password: register_data.password,\r\n        };\r\n\r\n        let login_response = await post_json(\"/user/login\", login_data);\r\n        if (login_response.error) {\r\n            throw new Error(login_response.error);\r\n        }\r\n\r\n        let token = login_response;\r\n        let user = register_response;\r\n\r\n        let user_data: UserData = {\r\n            user,\r\n            token\r\n        }\r\n        save_user_data_to_local(user_data);\r\n        window.location.href = \"/\";\r\n    };\r\n    register_and_signin();\r\n}\r\n\r\nfunction validate_registration_form(inputs: Inputs) {\r\n    let { valid, reason } = validate_registration_inputs(inputs);\r\n    enable_register_submit_button(valid, reason);\r\n}\r\n\r\nfunction registration_init() {\r\n    let inputs = get_input_fields();\r\n    if (!inputs) {\r\n        throw new Error(\"inputs not initialized\");\r\n    }\r\n    // hook up validation for registration form;\r\n    inputs.registration.email.oninput = () => validate_registration_form(inputs);\r\n    inputs.registration.first_name.oninput = () => validate_registration_form(inputs);\r\n    inputs.registration.last_name.oninput = () => validate_registration_form(inputs);\r\n    inputs.registration.password.oninput = () => validate_registration_form(inputs);\r\n    inputs.registration.repeat_password.oninput = () => validate_registration_form(inputs);\r\n    inputs.registration.submit.onclick = () => submit_registration(inputs);\r\n    validate_registration_form(inputs);\r\n}\r\n\r\nasync function user_revalidate_token() {\r\n    let user_data = get_local_user_data();\r\n    if (!user_data) {\r\n        return null;\r\n    }\r\n\r\n    if (time() > user_data.token.expires_at) {\r\n        // token expired, re-render after clearing local data\r\n        clear_local_user_data();\r\n        main();\r\n        return;\r\n    }\r\n\r\n    // refresh if less then 10 minutes left of the token\r\n    if ((time() + 600) > user_data.token.expires_at) {\r\n        let new_token_response = await post_json(\"/user/refresh_token\", {\r\n            user_token: user_data.token.id,\r\n        });\r\n        if (new_token_response.error) {\r\n            throw new Error(new_token_response.error)\r\n        }\r\n        user_data.token = new_token_response;\r\n        save_user_data_to_local(user_data);\r\n    }\r\n\r\n    // validate the current user token\r\n    let validation_response = await post_json(\"/user/who\", {\r\n        user_token: user_data.token.id\r\n    });\r\n\r\n    if (validation_response.error) {\r\n        if (validation_response.error === \"token invalid\") {\r\n            // token invalid, re-render after clearing local data\r\n            clear_local_user_data();\r\n            main();\r\n            return;\r\n        }\r\n        else {\r\n            throw new Error(validation_response.error)\r\n        }\r\n    }\r\n\r\n    user_data.user = validation_response;\r\n    save_user_data_to_local(user_data);\r\n}\r\n\r\nexport default function main() {\r\n    user_revalidate_token();\r\n    render_user();\r\n\r\n    // if signing call the other init as well for diff html dom stuff\r\n    if (window.location.pathname === \"/signin\") {\r\n        registration_init();\r\n    }\r\n}\r\n", "import { get_local_user_data } from \"./user\";\r\n\r\nimport { time, post_formdata, get_smallest_res_from_src } from \"./util\";\r\n\r\n// types and declerations\r\ndeclare global {\r\n    interface Window {\r\n        receive_data: (data: string) => void;\r\n    }\r\n}\r\n\r\nenum ItemTypeEnum {\r\n    paragraph,\r\n    image,\r\n    heading\r\n}\r\n\r\ntype TextItem = {\r\n    type: ItemTypeEnum.heading | ItemTypeEnum.paragraph,\r\n    text: string,\r\n    index: number,\r\n}\r\n\r\ntype MediaItem = {\r\n    type: ItemTypeEnum.image,\r\n    alt_text: string,\r\n    src_id: string | undefined,\r\n    index: number,\r\n}\r\n\r\ntype Article = {\r\n    id: undefined | string,\r\n    author_id: string;\r\n    title: string;\r\n    description: string;\r\n    content: Array<TextItem | MediaItem>;\r\n    last_changed: number;\r\n}\r\n\r\ntype Templates = {\r\n    paragraph: HTMLTemplateElement,\r\n    image: HTMLTemplateElement,\r\n    heading: HTMLTemplateElement,\r\n}\r\n\r\ntype ControllButtons = {\r\n    log_button: HTMLButtonElement;\r\n    add_paragraph_button: HTMLButtonElement;\r\n    add_image_button: HTMLButtonElement;\r\n    add_heading_button: HTMLButtonElement;\r\n}\r\n\r\n// constant values\r\nconst LOCAL_ARTICLE_STORAGE_KEY = \"editor-ts-local-article\";\r\n\r\n// internal storage functions\r\nfunction load_local_article() {\r\n    let article_string = localStorage.getItem(LOCAL_ARTICLE_STORAGE_KEY);\r\n    if (!article_string) {\r\n        return null;\r\n    }\r\n\r\n    let article: Article = JSON.parse(article_string);\r\n    if (!article) {\r\n        throw new Error(\"could not parse the local article, you fucked up somehow\");\r\n    }\r\n    return article;\r\n}\r\n\r\nfunction save_article_to_local(article: Article) {\r\n    let article_dump = JSON.stringify(article);\r\n    localStorage.setItem(LOCAL_ARTICLE_STORAGE_KEY, article_dump);\r\n}\r\n\r\nfunction clear_local_article() {\r\n    localStorage.removeItem(LOCAL_ARTICLE_STORAGE_KEY);\r\n}\r\n\r\n// internal init functions;\r\nfunction init_empty_article() {\r\n    let user_data = get_local_user_data();\r\n    if (!user_data) {\r\n        throw new Error(\"no user data found, not logged in\");\r\n    }\r\n\r\n    let article: Article = {\r\n        author_id: user_data.user.id,\r\n        content: [],\r\n        description: \"\",\r\n        last_changed: time(),\r\n        id: undefined,\r\n        title: \"\",\r\n    };\r\n    save_article_to_local(article);\r\n    return article;\r\n}\r\n\r\nfunction get_controll_buttons() {\r\n    let log_button = document.getElementById(\"log-article\") as HTMLButtonElement | null;\r\n    let add_paragraph_button = document.getElementById(\"add-paragraph\") as HTMLButtonElement | null;\r\n    let add_image_button = document.getElementById(\"add-image\") as HTMLButtonElement | null;\r\n    let add_heading_button = document.getElementById(\"add-heading\") as HTMLButtonElement | null;\r\n\r\n    if (\r\n        !log_button ||\r\n        !add_paragraph_button ||\r\n        !add_image_button ||\r\n        !add_heading_button\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    let controll_buttons: ControllButtons = {\r\n        log_button,\r\n        add_paragraph_button,\r\n        add_image_button,\r\n        add_heading_button\r\n    }\r\n\r\n    return controll_buttons;\r\n}\r\n\r\nfunction get_templates() {\r\n    let paragraph_templte = document.getElementById(\"article-paragraph-template\") as HTMLTemplateElement | null;\r\n    let image_templte = document.getElementById(\"article-image-template\") as HTMLTemplateElement | null;\r\n    let heading_templte = document.getElementById(\"article-heading-template\") as HTMLTemplateElement | null;\r\n\r\n    if (\r\n        !paragraph_templte ||\r\n        !image_templte ||\r\n        !heading_templte\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    let templates: Templates = {\r\n        paragraph: paragraph_templte,\r\n        image: image_templte,\r\n        heading: heading_templte,\r\n    }\r\n\r\n    return templates;\r\n}\r\n\r\nfunction get_editor() {\r\n    return document.getElementById(\"editor-container\") as HTMLElement | null;\r\n}\r\n\r\n\r\n// editor image functions\r\nfunction set_image_from_gallery_popup(index: number) {\r\n    const popup = window.open(\r\n        \"/gallery-popup\",\r\n        \"popupWindow\",\r\n        \"width=600,height=400\"\r\n    );\r\n\r\n    window.receive_data = function (data: string) {\r\n        if (!ARTICLE.content) {\r\n            return;\r\n        }\r\n\r\n        let item = ARTICLE.content[index];\r\n        if (item.type != ItemTypeEnum.image) {\r\n            return;\r\n        }\r\n        item.src_id = data;\r\n        editor_generate_preview();\r\n    };\r\n}\r\n\r\nfunction set_image_from_file_upload(index: number) {\r\n    // select a file\r\n    let input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = \"png, jpg, jpeg\";\r\n    input.multiple = false;\r\n    input.onchange = async () => {\r\n        if (!ARTICLE.content) {\r\n            return;\r\n        }\r\n        let media_item = ARTICLE.content[index];\r\n        if (media_item.type != ItemTypeEnum.image) {\r\n            return;\r\n        }\r\n        // retrieve the selected file\r\n        let input_files = input.files;\r\n        if (!input_files) {\r\n            return;\r\n        }\r\n        let files = Array.from(input_files);\r\n        let file = files[0];\r\n        input.remove();\r\n\r\n        // upload the file to the gallery\r\n        let formdata = new FormData();\r\n        formdata.append(\"media\", file);\r\n        let image = await post_formdata(\"/media/upload_media\", formdata);\r\n        let image_id = image.data.results[0].key;\r\n        // set the item source\r\n        media_item.src_id = image_id;\r\n        ARTICLE.last_changed = time();\r\n        editor_generate_preview();\r\n    };\r\n    input.click();\r\n}\r\n\r\nfunction render_image(entry: HTMLElement, index: number) {\r\n    let display = entry.querySelector(\".image-display\") as HTMLImageElement | null;\r\n    if (!display) {\r\n        throw new Error(\"media-display not found\");\r\n    }\r\n\r\n    if (!ARTICLE.content) {\r\n        throw new Error(\"article content not initialized\");\r\n    }\r\n\r\n    let media_item = ARTICLE.content[index];\r\n    if (media_item.type != ItemTypeEnum.image) {\r\n        throw new Error(\"item type is not image\");\r\n    }\r\n\r\n    // if src_id is undefined we have not yet chosen an image.\r\n    if (!media_item.src_id) {\r\n        display.classList.toggle(\"hidden\", true);\r\n        return;\r\n    }\r\n\r\n    // else image_id is defined and we render the image\r\n    const load = async () => {\r\n        if (!ARTICLE.content) {\r\n            throw new Error(\"article content not initialized\");\r\n        }\r\n        let media_item = ARTICLE.content[index];\r\n        if (media_item.type != ItemTypeEnum.image) {\r\n            throw new Error(\"item type is not image\");\r\n        }\r\n        if (!media_item.src_id) {\r\n            throw new Error(\"src_id not found\");\r\n        }\r\n        display.src = await get_smallest_res_from_src(\r\n            media_item.src_id,\r\n            entry.clientWidth\r\n        );\r\n        display.classList.toggle(\"hidden\", false);\r\n    };\r\n    load();\r\n}\r\n\r\nfunction insert_template_in_editor(template: HTMLTemplateElement) {\r\n    console.log(template);\r\n    if (!EDITOR) {\r\n        throw new Error(\"Editor has not been initalized\");\r\n    }\r\n\r\n    let entry = document.createElement(\"li\");\r\n    let clone = template.cloneNode(true) as HTMLTemplateElement | null;\r\n    if (!clone) {\r\n        throw new Error(\"could not clone template\");\r\n    }\r\n    let item = clone.content;\r\n\r\n    entry.appendChild(item);\r\n    EDITOR.appendChild(entry);\r\n    return entry;\r\n}\r\n\r\nfunction editor_connect_paragraph(entry: HTMLElement, index: number) {\r\n    let textarea = entry.querySelector(\".paragraph-input\") as HTMLTextAreaElement | null;\r\n    if (!textarea) {\r\n        throw new Error(\"Could not find textarea\");\r\n    }\r\n    let text_item = ARTICLE.content[index];\r\n    if (text_item.type != ItemTypeEnum.paragraph) {\r\n        throw new Error(\"Article item at index is not a paragraph\");\r\n    }\r\n    textarea.value = text_item.text;\r\n    textarea.onchange = () => {\r\n        text_item.text = textarea.value;\r\n    };\r\n}\r\n\r\nfunction editor_image_connect(entry: HTMLElement, index: number) {\r\n    // connect the alt-text and its relevant update\r\n    let alt_text = entry.querySelector(\".image-alt-text-input\") as HTMLInputElement | null;\r\n    if (!alt_text) {\r\n        throw new Error(\"could not find alt_text element\");\r\n    }\r\n    let image_item = ARTICLE.content[index];\r\n    if (image_item.type != ItemTypeEnum.image) {\r\n        throw new Error(\"Article item at index is not a image\");\r\n    }\r\n    if (image_item.alt_text) {\r\n        alt_text.value = image_item.alt_text;\r\n    }\r\n    alt_text.onchange = () => {\r\n        image_item.alt_text = alt_text.value;\r\n    };\r\n\r\n    // connect the upload buttons\r\n    let image_select_button = entry.querySelector(\".image-gallery-select\") as HTMLElement | null;\r\n    let image_upload_button = entry.querySelector(\".image-gallery-upload\") as HTMLElement | null;\r\n\r\n    if (image_select_button) {\r\n        image_select_button.onclick = () => editor_gallery_pop_up_select(index);\r\n    }\r\n    if (image_upload_button) {\r\n        image_upload_button.onclick = () => set_image_from_file_upload(index);\r\n    }\r\n}\r\n\r\nfunction editor_connect_generic(entry: HTMLElement, index: number) {\r\n    // generic delete\r\n    let delete_button = entry.querySelector(\".delete-button\") as HTMLElement | null;\r\n    if (delete_button) {\r\n        delete_button.onclick = () => {\r\n            remove_item_from_article(index);\r\n            editor_generate_preview();\r\n        };\r\n    }\r\n\r\n    // generic move up\r\n    let move_up_button = entry.querySelector(\".move-up-button\") as HTMLElement | null;\r\n    if (move_up_button) {\r\n        move_up_button.onclick = () => {\r\n            editor_move_item_up(index);\r\n            editor_generate_preview();\r\n        };\r\n    }\r\n\r\n    // generic move down\r\n    let move_down_button = entry.querySelector(\".move-down-button\") as HTMLElement | null;\r\n    if (move_down_button) {\r\n        move_down_button.onclick = () => {\r\n            editor_move_item_down(index);\r\n            editor_generate_preview();\r\n        };\r\n    }\r\n}\r\n\r\n// view functions\r\nfunction editor_generate_preview() {\r\n    let y_pos = window.scrollY;\r\n    if (!EDITOR) {\r\n        throw new Error(\"Editor is not initialized\");\r\n    }\r\n\r\n    if (!ARTICLE) {\r\n        throw new Error(\"Article is not initialized\");\r\n    }\r\n\r\n    EDITOR.innerHTML = \"\";\r\n\r\n    let entry;\r\n\r\n    for (let index = 0; index < ARTICLE.content.length; index++) {\r\n        switch (ARTICLE.content[index].type) {\r\n            case ItemTypeEnum.paragraph:\r\n                if (!TEMPLATES.paragraph) {\r\n                    throw new Error(\"paragraph template not initialized\");\r\n                }\r\n                entry = insert_template_in_editor(TEMPLATES.paragraph);\r\n                editor_connect_paragraph(entry, index);\r\n                break;\r\n\r\n            case ItemTypeEnum.image:\r\n                if (!TEMPLATES.image) {\r\n                    throw new Error(\"image template not initialized\");\r\n                }\r\n                console.log(\"inserting image\");\r\n                entry = insert_template_in_editor(TEMPLATES.image);\r\n                editor_image_render(entry, index);\r\n                editor_image_connect(entry, index);\r\n                break;\r\n\r\n            case ItemTypeEnum.heading:\r\n                if (!TEMPLATES.heading) {\r\n                    throw new Error(\"image template not initialized\");\r\n                }\r\n                entry = insert_template_in_editor(TEMPLATES.heading);\r\n                // editor_heading_connect(entry, index); // TODO fix the editor heading connector\r\n                break;\r\n\r\n            // skip to next item if we dont have a template for the type\r\n            default:\r\n                console.log(\"Item type in editor-render is unknown, skipping\")\r\n                continue;\r\n        }\r\n        editor_connect_generic(entry, index);\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n        window.scrollTo(0, y_pos);\r\n    });\r\n}\r\n\r\n// article functions\r\nfunction editor_add_item(item_type: ItemTypeEnum) {\r\n    let user_data = get_local_user_data();\r\n    if (!user_data) {\r\n        throw new Error(\"not logged in\");\r\n    }\r\n\r\n    let article = load_local_article();\r\n    if (!article) {\r\n        throw new Error(\"article has not been initalized\");\r\n    }\r\n\r\n    let length = article.content.length;\r\n    let new_item: TextItem | MediaItem;\r\n\r\n    switch (item_type) {\r\n        case ItemTypeEnum.paragraph:\r\n        case ItemTypeEnum.heading:\r\n            new_item = {\r\n                type: item_type,\r\n                text: \"\",\r\n                index: length\r\n            }\r\n            break;\r\n        case ItemTypeEnum.image:\r\n            new_item = {\r\n                type: item_type,\r\n                alt_text: \"\",\r\n                index: length,\r\n                src_id: undefined,\r\n            }\r\n            break;\r\n    }\r\n\r\n    article.content.push(new_item);\r\n    article.last_changed = time();\r\n    save_article_to_local(article);\r\n    editor_generate_preview();\r\n}\r\n\r\nfunction remove_item_from_article(index: number) {\r\n    ARTICLE.content?.splice(index, 1);\r\n    ARTICLE.last_changed = time();\r\n}\r\n\r\nfunction editor_move_item_down(index_to_change: number) {\r\n    if (!ARTICLE.content) {\r\n        return;\r\n    }\r\n\r\n    if (index_to_change >= ARTICLE.content.length - 1) {\r\n        return;\r\n    }\r\n\r\n    let item = ARTICLE.content[index_to_change];\r\n    ARTICLE.content[index_to_change] = ARTICLE.content[index_to_change + 1];\r\n    ARTICLE.content[index_to_change + 1] = item;\r\n    // assign new indexes\r\n    ARTICLE.content[index_to_change].index = index_to_change;\r\n    ARTICLE.content[index_to_change + 1].index = index_to_change + 1;\r\n\r\n    ARTICLE.last_changed = time();\r\n}\r\n\r\nfunction editor_move_item_up(index_to_change: number) {\r\n    if (!ARTICLE.content) {\r\n        return;\r\n    }\r\n\r\n    if (index_to_change < 1) {\r\n        return;\r\n    }\r\n    let item = ARTICLE.content[index_to_change];\r\n    ARTICLE.content[index_to_change] = ARTICLE.content[index_to_change - 1];\r\n    ARTICLE.content[index_to_change - 1] = item;\r\n    // assign new indexes\r\n    ARTICLE.content[index_to_change].index = index_to_change;\r\n    ARTICLE.content[index_to_change - 1].index = index_to_change - 1;\r\n\r\n    ARTICLE.last_changed = time();\r\n}\r\n\r\nfunction editor_log_article() {\r\n    let article = load_local_article();\r\n    console.log(article);\r\n}\r\n\r\nexport default function main() {\r\n    let user_data = get_local_user_data();\r\n    if (!user_data) {\r\n        // redirect out of editor if not logged in\r\n        window.location.href = \"/\";\r\n        return;\r\n    }\r\n\r\n    // load or initalize the article;\r\n    let article = load_local_article();\r\n    if (!article) {\r\n        article = init_empty_article();\r\n    }\r\n\r\n    let controll_buttons = get_controll_buttons();\r\n    if (!controll_buttons) {\r\n        throw new Error(\"controll buttons not initialized\");\r\n    }\r\n\r\n    controll_buttons.log_button.onclick = () => editor_log_article();\r\n    controll_buttons.add_paragraph_button.onclick = () => editor_add_item(ItemTypeEnum.paragraph);\r\n    controll_buttons.add_image_button.onclick = () => editor_add_item(ItemTypeEnum.image);\r\n    controll_buttons.add_heading_button.onclick = () => editor_add_item(ItemTypeEnum.heading);\r\n}", "import editor_main from \"./editor\";\r\nimport user_main from \"./user\";\r\n\r\nwindow.addEventListener(\"load\", (event) => {\r\n    if (window.location.pathname === \"/editor\") {\r\n        editor_main();\r\n    }\r\n\r\n    user_main();\r\n});"],
  "mappings": "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",
  "names": ["time", "post_json", "endpoint", "data", "post_formdata", "response", "json_response", "USER_LOCAL_TOKEN_STORAGE_KEY", "USER_LOCAL_DATA_STORAGE_KEY", "get_local_user_data", "token_string", "user_string", "token", "user", "clear_local_user_data", "save_user_data_to_local", "userdata", "data", "get_html_elements", "login_template", "profile_template", "details_container", "get_input_fields", "registration_first_name", "registration_last_name", "registration_email", "registration_password", "registration_repeat_password", "registration_submit", "signin_email", "signin_password", "signin_submit", "logout", "post_json", "main", "render_user", "elements", "clone", "firstname_element", "lastname_element", "logout_button", "enable_register_submit_button", "is_valid", "reason", "inputs", "validate_registration_inputs", "valid", "submit_registration", "register_data", "register_response", "login_data", "login_response", "validate_registration_form", "registration_init", "user_revalidate_token", "user_data", "time", "new_token_response", "validation_response", "LOCAL_ARTICLE_STORAGE_KEY", "load_local_article", "article_string", "article", "save_article_to_local", "article_dump", "init_empty_article", "user_data", "get_local_user_data", "article", "time", "save_article_to_local", "get_controll_buttons", "log_button", "add_paragraph_button", "add_image_button", "add_heading_button", "set_image_from_file_upload", "index", "input", "media_item", "input_files", "file", "formdata", "image_id", "post_formdata", "time", "editor_generate_preview", "insert_template_in_editor", "template", "entry", "clone", "item", "editor_connect_paragraph", "index", "textarea", "text_item", "editor_image_connect", "alt_text", "image_item", "image_select_button", "image_upload_button", "set_image_from_file_upload", "editor_connect_generic", "delete_button", "remove_item_from_article", "editor_generate_preview", "move_up_button", "editor_move_item_up", "move_down_button", "editor_move_item_down", "y_pos", "editor_add_item", "item_type", "get_local_user_data", "article", "load_local_article", "length", "new_item", "time", "save_article_to_local", "index_to_change", "editor_log_article", "main", "init_empty_article", "controll_buttons", "get_controll_buttons", "event", "main"]
}
